// --------------------------------------------------------------------------------------------------------------------
// <copyright file="VowpalWabbitInterfaceVisitorExt.cs">
//   Copyright (c) by respective owners including Yahoo!, Microsoft, and
//   individual contributors. All rights reserved.  Released under a BSD
//   license as described in the file LICENSE.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.Contracts;
using System.Linq;
using VW.Serializer.Intermediate;
using System.Globalization;

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

namespace VW.Serializer
{
    public partial class VowpalWabbitDefaultMarshaller
    {
		<# foreach(var t in new[] { typeof(byte), typeof(sbyte), typeof(Int16), typeof(Int32), typeof(UInt16), typeof(UInt32), typeof(float), typeof(Int64), typeof(UInt64), typeof(double) }) { #>
		/// <summary>
        /// Transfers feature data to native space.
        /// </summary>
		/// <param name="context">The marshalling context.</param>
		/// <param name="ns">The namespace description.</param>
		/// <param name="feature">The feature description.</param>
		/// <param name="value">The feature value.</param>
        public void MarshalFeature(VowpalWabbitMarshalContext context, Namespace ns, PreHashedFeature feature, <#=t#> value)
        {
            Contract.Requires(context != null);
            Contract.Requires(ns != null);
            Contract.Requires(feature != null);

			<# if(new[]{ typeof(Int64), typeof(UInt64), typeof(double) }.Contains(t)) {#>
			#if DEBUG
            if (value > float.MaxValue || value < float.MinValue)
            {
                Trace.TraceWarning("Precision lost for feature value: " + value);
            }
			#endif
			<# } #>

			context.NamespaceBuilder.AddFeature(feature.FeatureHash, (float)value);

			if (disableStringExampleGeneration)
            {
                return;
            }

            context.StringExample.AppendFormat(
                CultureInfo.InvariantCulture,
                " {0}:{1:E20}",
                feature.Name,
                value);
        }

		/// <summary>
        /// Transfers feature data to native space.
        /// </summary>
		/// <param name="context">The marshalling context.</param>
		/// <param name="ns">The namespace description.</param>
		/// <param name="feature">The feature description.</param>
		/// <param name="value">The feature value.</param>
        public unsafe void MarshalFeature(VowpalWabbitMarshalContext context, Namespace ns, PreHashedFeature feature, <#=t#>[] value)
        {
            if (value == null)
            {
                return;
            }

            var i = 0;

            // support anchor feature
            if (feature.AddAnchor)
            {
				context.NamespaceBuilder.PreAllocate(value.Length + 1);

                context.NamespaceBuilder.AddFeature(ns.NamespaceHash, 1);
                i++;
            }
			else
			{
				context.NamespaceBuilder.PreAllocate(value.Length);
			}

			<# if (t == typeof(float)) { #>

			fixed (float* begin = value)
			{
				context.NamespaceBuilder.AddFeaturesUnchecked((uint)(ns.NamespaceHash + i), begin, begin + value.Length);
			}

			<# } else { #>

            foreach (var v in value)
            {
				<# if(new[]{ typeof(Int64), typeof(UInt64), typeof(double) }.Contains(t)) {#>
				#if DEBUG
				if (v > float.MaxValue || v < float.MinValue)
				{
					Trace.TraceWarning("Precision lost for feature value: " + v);
				}
				#endif
				<# } #>

                context.NamespaceBuilder.AddFeature((uint)(ns.NamespaceHash + i), (float)v);
                i++;
            }
			<# } #>

            if (disableStringExampleGeneration)
            {
                return;
            }

            // support anchor feature
            i = 0;
            if (feature.AddAnchor)
            {
                context.StringExample.Append(" 0:1");
                i++;
            }

            foreach (var v in value)
            {
                context.StringExample.AppendFormat(CultureInfo.InvariantCulture, " {0}:{1:E20}", i, v);
                i++;
            }
        }

		<# } #>

		<# foreach(var t in new[] { typeof(byte), typeof(sbyte), typeof(Int16), typeof(Int32), typeof(UInt16) }) { #>

		<# foreach(var s in new[] { typeof(byte), typeof(sbyte), typeof(Int16), typeof(Int32), typeof(UInt16), typeof(UInt32), typeof(float), typeof(Int64), typeof(UInt64), typeof(double) }) { #>

		/// <summary>
        /// Transfers feature data to native space.
        /// </summary>
		/// <param name="context">The marshalling context.</param>
		/// <param name="ns">The namespace description.</param>
		/// <param name="feature">The feature description.</param>
		/// <param name="value">The feature value.</param>
		[ContractVerification(false)]
        public void MarshalFeature(VowpalWabbitMarshalContext context, Namespace ns, Feature feature, IDictionary<<#=t#>, <#=s#>> value)
        {
            Contract.Requires(context != null);
            Contract.Requires(ns != null);
            Contract.Requires(feature != null);

			if (value == null)
			{
				return;
			}

            foreach (var kvp in value)
            {
				<# if(new[]{ typeof(Int64), typeof(UInt64), typeof(double) }.Contains(t)) {#>
				#if DEBUG
				if (kvp.Value > float.MaxValue || kvp.Value < float.MinValue)
				{
					Trace.TraceWarning("Precision lost for feature value: " + kvp.Value);
				}
				#endif
				<# } #>

				context.NamespaceBuilder.AddFeature((uint)(ns.NamespaceHash + kvp.Key), (float)kvp.Value);
            }

			if (disableStringExampleGeneration)
            {
                return;
            }

			foreach (var kvp in value)
            {
				// TODO: not sure if negative numbers will work
                context.StringExample.AppendFormat(
                    CultureInfo.InvariantCulture,
                    " {0}:{1:E20}",
                    kvp.Key,
                    kvp.Value);
			}
        }
		<# } #>

		<# } #>
    }
}
